{"version":3,"sources":["landingPage.js","play.js","rules.js","about.js","notFound.js","App.js","serviceWorker.js","index.js"],"names":["landingPage","className","to","href","target","rel","icon","faLinkedin","faGithub","Play","useState","deck","cards","setCards","playerHand","setPlayerHand","discardPile","setDiscardPile","totalScore","setTotalScore","isGameStarted","setisGameStarted","isGameFinished","setisGameFinished","endGameMessageDiplay","setEndGameMessageDiplay","restartGame","calculateCardBonus","currentCard","synergyCards","bonus","id","bonusValue","value","totalBonusValue","forEach","card","includes","useEffect","sum","push","basePoints","reduce","cur","prev","length","swal","buttons","then","style","display","onClick","randomCards","array","t","i","m","Math","floor","random","shuffle","slice","splice","map","key","backgroundImage","image","backgroundSize","backgroundRepeat","backgroundPosition","height","disabled","toDiscard","copyCards","firstCard","discardCard","rules","src","alt","NotFound","App","fonts","font","weights","exact","path","component","LandingPage","Rules","About","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6vEAOe,SAASA,IACtB,OACE,yBAAKC,UAAU,aACb,4BAAQA,UAAU,OAChB,+CAGF,6BAASA,UAAU,YACjB,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,SAA1B,SAKF,6BAASD,UAAU,aACjB,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,UAA1B,UAKF,6BAASD,UAAU,aACjB,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,UAA1B,UAKF,4BAAQD,UAAU,OAChB,uDACA,uBACEE,KAAK,yCACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBJ,UAAU,WAAWK,KAAMC,OAE9C,uBACEJ,KAAK,iCACLC,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBJ,UAAU,WAAWK,KAAME,S,4DCxCvC,SAASC,IAAQ,IAAD,EACHC,mBAASC,EAAKC,OADX,mBACtBA,EADsB,KACfC,EADe,OAEOH,mBAAS,IAFhB,mBAEtBI,EAFsB,KAEVC,EAFU,OAGSL,mBAAS,IAHlB,mBAGtBM,EAHsB,KAGTC,EAHS,OAIOP,mBAAS,GAJhB,mBAItBQ,EAJsB,KAIVC,EAJU,OAKaT,oBAAS,GALtB,mBAKtBU,EALsB,KAKPC,EALO,OAMeX,oBAAS,GANxB,mBAMtBY,EANsB,KAMNC,EANM,OAO2Bb,mBAAS,QAPpC,mBAOtBc,EAPsB,KAOAC,EAPA,KA6B7B,IAqBMC,EAAc,WAClBb,EAASF,EAAKC,OACdG,EAAc,IACdE,EAAe,IACfE,EAAc,GACdE,GAAiB,GACjBE,GAAkB,GAClBE,EAAwB,SAGpBE,EAAqB,SAACC,GAC1B,IAAMC,EAAeD,EAAYE,MAAMC,GACjCC,EAAaJ,EAAYE,MAAMG,MACjCC,EAAkB,EAStB,OAPApB,EAAWqB,SAAQ,SAACC,GAGdR,EAAYG,KAAOK,EAAKL,IAAMF,EAAaQ,SAASD,EAAKL,MAC3DG,GAAmBF,MAGhBE,GAiCT,OA9BAI,qBAAU,WACR,IAAIC,EAAM,GACVzB,EAAWqB,SAAQ,SAACC,GAClBG,EAAIC,KAAKJ,EAAKK,YACdF,EAAIC,KAAKb,EAAmBS,IAC5BjB,EAAcoB,EAAIG,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,SAGhD9B,EAAW+B,OAAS,EAAIxB,GAAiB,GAAQA,GAAiB,KACjE,CAACP,IAEJwB,qBAAU,WACJtB,EAAY6B,QAAU,IACxBtB,GAAkB,GAClBE,EAAwB,YAEzB,CAACT,IAEJsB,qBAAU,YACe,IAAnBhB,GACFwB,IAAK,gBAAD,+BAA0C5B,GAAc,UAAW,CACrE6B,QAAS,CAAC,UAAW,QACpBC,MAAK,SAACf,GACO,OAAVA,GACFP,SAIL,CAACJ,IAGF,yBAAKrB,UAAU,qBACb,6BAASA,UAAU,YACjB,8BACA,iCACE,4BACEgD,MAAO,CAAEC,QAAS9B,EAAgB,OAAS,SAC3CnB,UAAU,gBACVkD,QApFU,WAClB,IAAMC,EArBR,SAAiBC,GAOf,IALA,IACEC,EACAC,EAFEC,EAAIH,EAAMR,OAKPW,GAELD,EAAIE,KAAKC,MAAMD,KAAKE,SAAWH,KAG/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAGb,OAAOD,EAIaO,CAAQ,YAAIhD,IAEhCG,EAAcqC,EAAYS,MAAM,EAAG,IAEnCT,EAAYU,OAAO,EAAG,GACtBjD,EAASuC,GAET/B,GAAiB,KAyEX,SAQA,4BACEpB,UAAU,oBACVkD,QAASzB,EACTuB,MAAO,CAAEC,QAAS1B,IAHpB,WAQA,0BAAMyB,MAAO,CAAEC,QAAS9B,EAAgB,QAAU,SAAlD,eACc,0BAAMnB,UAAU,SAASiB,MAK3C,6BAASjB,UAAU,eAChBe,EAAY+C,KAAI,SAAC3B,GAAD,OACf,yBACE4B,IAAK5B,EAAKL,GACV9B,UAAU,OACVgD,MAAO,CACLgB,gBAAgB,cAAD,OAAgB7B,EAAK8B,MAArB,KACfC,eAAgB,UAChBC,iBAAkB,YAClBC,mBAAoB,SACpBC,OAAQ,cAMhB,6BAASrE,UAAU,cAChBa,EAAWiD,KAAI,SAACnC,GAAD,OACd,yBAAKoC,IAAKpC,EAAYG,GAAI9B,UAAU,kBAClC,yBAAKA,UAAU,WACb,4BACEsE,SAAUjD,EACV6B,QAAS,kBAlHH,SAACqB,GACnB,IAAMC,EAAY7D,EAAMiD,QAClBa,EAAYD,EAAUX,OAAO,EAAG,GACtC/C,GAAc,SAAC6B,GAAD,mBACTA,EAAKmB,KAAI,SAAC3B,GAAD,OAAWA,EAAKL,KAAOyC,EAAUzC,GAAKK,EAAOsC,EAAU,UAErE7D,EAAS4D,GACTxD,GAAe,SAAC2B,GAAD,4BAAcA,GAAd,gBAAyB4B,QA2GbG,CAAY/C,KAF7B,WAMA,oCAEE,0BAAM3B,UAAU,SACb2B,EAAYa,WAAad,EAAmBC,MAInD,yBACEqB,MAAO,CACLgB,gBAAgB,cAAD,OAAgBrC,EAAYsC,MAA5B,KACfC,eAAgB,UAChBC,iBAAkB,YAClBC,mBAAoB,SACpBC,OAAQ,OAEVrE,UAAU,cAMlB,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,gBAIA,yBAAKD,UAAU,WACb,uBACEA,UAAU,WACVgD,MAAO,CAAEC,QAAS9B,EAAgB,OAAS,SAF7C,uDAMA,uBACEnB,UAAU,mBACVgD,MAAO,CAAEC,QAAS9B,EAAgB,OAAS,SAF7C,kBAKE,0BAAMnB,UAAU,SAAS,EAAIe,EAAY6B,QAL3C,oB,MChMO,SAAS+B,IACtB,OACE,yBAAK3E,UAAU,kBACb,6BAASA,UAAU,gBACjB,qCACA,4BACE,mEACA,mGAGA,qEACA,kFAGJ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,iB,MCbS,SAAS0E,IACtB,OACE,yBAAK3E,UAAU,kBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,aAAa4E,IAAI,qBAAqBC,IAAI,WACzD,uBAAG7E,UAAU,iBAAb,kOAQF,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,iBChBS,SAAS6E,IACpB,OACG,6DCKP,IAoBeC,EApBH,kBACV,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAO,CACL,CACEC,KAAM,WACNC,QAAS,CAAC,SAIhB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAW7E,IAC/B,kBAAC,IAAD,CAAO4E,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,SAASC,UAAWG,IAChC,kBAAC,IAAD,CAAOH,UAAWP,OCZJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17f28b60.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../src/css/landingPage.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nexport default function landingPage() {\r\n  return (\r\n    <div className=\"container\">\r\n      <header className=\"box\">\r\n        <h1>Fantasy Realms</h1>\r\n      </header>\r\n\r\n      <section className=\"play box\">\r\n        <Link className=\"link\" to=\"/play\">\r\n          Play\r\n        </Link>\r\n      </section>\r\n\r\n      <section className=\"rules box\">\r\n        <Link className=\"link\" to=\"/rules\">\r\n          Rules\r\n        </Link>\r\n      </section>\r\n\r\n      <section className=\"about box\">\r\n        <Link className=\"link\" to=\"/about\">\r\n          About\r\n        </Link>\r\n      </section>\r\n\r\n      <footer className=\"box\">\r\n        <p> Made by Krzysztof Kozak</p>\r\n        <a\r\n          href=\"https://www.linkedin.com/in/kriskozak/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon className=\"linkedIn\" icon={faLinkedin} />\r\n        </a>\r\n        <a\r\n          href=\"https://github.com/Kris-c0der/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon className=\"linkedIn\" icon={faGithub} />\r\n        </a>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport swal from \"@sweetalert/with-react\";\r\nimport \"../src/css/play.css\";\r\nimport deck from \"./data/deck.json\";\r\n\r\nexport default function Play() {\r\n  const [cards, setCards] = useState(deck.cards);\r\n  const [playerHand, setPlayerHand] = useState([]);\r\n  const [discardPile, setDiscardPile] = useState([]);\r\n  const [totalScore, setTotalScore] = useState(0);\r\n  const [isGameStarted, setisGameStarted] = useState(false);\r\n  const [isGameFinished, setisGameFinished] = useState(false);\r\n  const [endGameMessageDiplay, setEndGameMessageDiplay] = useState(\"none\");\r\n\r\n  function shuffle(array) {\r\n    //Fisher–Yates shuffle: source: https://bost.ocks.org/mike/shuffle/\r\n    var m = array.length,\r\n      t,\r\n      i;\r\n\r\n    // While there remain elements to shuffle…\r\n    while (m) {\r\n      // Pick a remaining element…\r\n      i = Math.floor(Math.random() * m--);\r\n\r\n      // And swap it with the current element.\r\n      t = array[m];\r\n      array[m] = array[i];\r\n      array[i] = t;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  const handleStart = () => {\r\n    const randomCards = shuffle([...cards]);\r\n\r\n    setPlayerHand(randomCards.slice(0, 7));\r\n\r\n    randomCards.splice(0, 8);\r\n    setCards(randomCards);\r\n\r\n    setisGameStarted(true);\r\n  };\r\n\r\n  const discardCard = (toDiscard) => {\r\n    const copyCards = cards.slice();\r\n    const firstCard = copyCards.splice(0, 1);\r\n    setPlayerHand((prev) => [\r\n      ...prev.map((card) => (card.id !== toDiscard.id ? card : firstCard[0])),\r\n    ]);\r\n    setCards(copyCards);\r\n    setDiscardPile((prev) => [...prev, { ...toDiscard }]);\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setCards(deck.cards);\r\n    setPlayerHand([]);\r\n    setDiscardPile([]);\r\n    setTotalScore(0);\r\n    setisGameStarted(false);\r\n    setisGameFinished(false);\r\n    setEndGameMessageDiplay(\"none\");\r\n  };\r\n\r\n  const calculateCardBonus = (currentCard) => {\r\n    const synergyCards = currentCard.bonus.id; //które karty dają mi bonus?\r\n    const bonusValue = currentCard.bonus.value; //Jaka jest wartość bonusu?\r\n    let totalBonusValue = 0; //Łączna wartość zebranych bonusów\r\n\r\n    playerHand.forEach((card) => {\r\n      // debugger;\r\n      //nie porównuj z samym sobą & i zobacz czy reszta kart daje mi bonus.\r\n      if (currentCard.id !== card.id && synergyCards.includes(card.id)) {\r\n        totalBonusValue += bonusValue;\r\n      }\r\n    });\r\n    return totalBonusValue;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let sum = [];\r\n    playerHand.forEach((card) => {\r\n      sum.push(card.basePoints);\r\n      sum.push(calculateCardBonus(card));\r\n      setTotalScore(sum.reduce((cur, prev) => cur + prev));\r\n    });\r\n\r\n    playerHand.length > 0 ? setisGameStarted(true) : setisGameStarted(false);\r\n  }, [playerHand]);\r\n\r\n  useEffect(() => {\r\n    if (discardPile.length >= 5) {\r\n      setisGameFinished(true);\r\n      setEndGameMessageDiplay(\"block\");\r\n    }\r\n  }, [discardPile]);\r\n\r\n  useEffect(() => {\r\n    if (isGameFinished === true) {\r\n      swal(\"Game Finished\", `Your total score was ${totalScore}`, \"success\", {\r\n        buttons: [\"Restart\", \"OK\"],\r\n      }).then((value) => {\r\n        if (value === null) {\r\n          restartGame();\r\n        }\r\n      });\r\n    }\r\n  }, [isGameFinished]);\r\n\r\n  return (\r\n    <div className=\"gameContainer box\">\r\n      <section className=\"drawPile\">\r\n        <div></div>\r\n        <section>\r\n          <button\r\n            style={{ display: isGameStarted ? \"none\" : \"block\" }}\r\n            className=\"start-btn box\"\r\n            onClick={handleStart}\r\n          >\r\n            Start\r\n          </button>\r\n\r\n          <button\r\n            className=\"restartButton box\"\r\n            onClick={restartGame}\r\n            style={{ display: endGameMessageDiplay }}\r\n          >\r\n            Restart\r\n          </button>\r\n\r\n          <span style={{ display: isGameStarted ? \"block\" : \"none\" }}>\r\n            Total Score:<span className=\"score\">{totalScore}</span>\r\n          </span>\r\n        </section>\r\n      </section>\r\n\r\n      <section className=\"discardPile\">\r\n        {discardPile.map((card) => (\r\n          <div\r\n            key={card.id}\r\n            className=\"card\"\r\n            style={{\r\n              backgroundImage: `url(./deck/${card.image})`,\r\n              backgroundSize: \"contain\",\r\n              backgroundRepeat: \"no-repeat\",\r\n              backgroundPosition: \"center\",\r\n              height: \"100%\",\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </section>\r\n\r\n      <section className=\"playerHand\">\r\n        {playerHand.map((currentCard) => (\r\n          <div key={currentCard.id} className=\"card-container\">\r\n            <div className=\"wrapper\">\r\n              <button\r\n                disabled={isGameFinished}\r\n                onClick={() => discardCard(currentCard)}\r\n              >\r\n                Discard\r\n              </button>\r\n              <p>\r\n                Value:\r\n                <span className=\"score\">\r\n                  {currentCard.basePoints + calculateCardBonus(currentCard)}\r\n                </span>\r\n              </p>\r\n            </div>\r\n            <div\r\n              style={{\r\n                backgroundImage: `url(./deck/${currentCard.image})`,\r\n                backgroundSize: \"contain\",\r\n                backgroundRepeat: \"no-repeat\",\r\n                backgroundPosition: \"center\",\r\n                height: \"85%\",\r\n              }}\r\n              className=\"card\"\r\n            ></div>\r\n          </div>\r\n        ))}\r\n      </section>\r\n\r\n      <Link className=\"link box\" to=\"/\">\r\n        Back to Home\r\n      </Link>\r\n\r\n      <div className=\"wrapper\">\r\n        <p\r\n          className=\"gameHint\"\r\n          style={{ display: isGameStarted ? \"flex\" : \"none\" }}\r\n        >\r\n          Try to get rid of cards that don't fit your hand :)\r\n        </p>\r\n        <p\r\n          className=\"movesCounter box\"\r\n          style={{ display: isGameStarted ? \"flex\" : \"none\" }}\r\n        >\r\n          You can discard\r\n          <span className=\"score\">{5 - discardPile.length}</span> more time(s).\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../src/css/rules.css\";\r\n\r\nexport default function rules() {\r\n  return (\r\n    <div className=\"rulesContainer\">\r\n      <section className=\"rulesBox box\">\r\n        <h1>Rules</h1>\r\n        <ul>\r\n          <li>Start the game by drawing new hand.</li>\r\n          <li>\r\n            You can discard a card in your hand 5 times via the discard button.\r\n          </li>\r\n          <li>Try to replace the lowest value card.</li>\r\n          <li>After 5 discards, you will see your final score.</li>\r\n        </ul>\r\n      </section>\r\n      <Link className=\"link box\" to=\"/\">\r\n        Back to Home\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../src/css/about.css\";\r\n// import avatar from \"./avatar\"\r\n\r\nexport default function rules() {\r\n  return (\r\n    <div className=\"aboutContainer\">\r\n      <div className=\"wrapper\">\r\n        <img className=\"avatar box\" src=\"/avatar/avatar.jpg\" alt=\"avatar\" />\r\n        <p className=\"aboutText box\">\r\n          Hiya, my name is Kris and this is my game project. I copied an\r\n          existing physical game called Fantasy Realms. The gameplay mechanics\r\n          are simplified but I plan on expanding them in the future as my\r\n          knowledge and skill grow.\r\n        </p>\r\n      </div>\r\n\r\n      <Link className=\"link box\" to=\"/\">\r\n        Back to Home\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n       <h1>404: Whoops, nothing is here!</h1>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Link, Switch, NavLink } from \"react-router-dom\";\r\nimport GoogleFontLoader from \"react-google-font-loader\";\r\nimport LandingPage from \"./landingPage\";\r\nimport Play from \"./play\";\r\nimport Rules from \"./rules\";\r\nimport About from \"./about\";\r\nimport NotFound from \"./notFound\";\r\n\r\nconst App = () => (\r\n  <HashRouter>\r\n    <GoogleFontLoader\r\n      fonts={[\r\n        {\r\n          font: \"Pacifico\",\r\n          weights: [400],\r\n        },\r\n      ]}\r\n    />\r\n    <Switch>\r\n      <Route exact path=\"/\" component={LandingPage} />\r\n      <Route path=\"/play\" component={Play} />\r\n      <Route path=\"/rules\" component={Rules} />\r\n      <Route path=\"/about\" component={About} />\r\n      <Route component={NotFound} />\r\n    </Switch>\r\n  </HashRouter>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../src/css/index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}