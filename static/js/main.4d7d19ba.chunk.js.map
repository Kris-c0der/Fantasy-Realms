{"version":3,"sources":["landingPage.js","play.js","rules.js","about.js","notFound.js","App.js","serviceWorker.js","index.js"],"names":["landingPage","className","to","href","target","rel","icon","faLinkedin","faGithub","Play","useState","deck","cards","setCards","playerHand","setPlayerHand","discardPile","setDiscardPile","totalScore","setTotalScore","isGameStarted","setisGameStarted","isGameFinished","setisGameFinished","endGameMessageDiplay","setEndGameMessageDiplay","restartGame","calculateCardBonus","currentCard","synergyCards","bonus","id","bonusValue","value","totalBonusValue","forEach","card","includes","useEffect","sum","push","basePoints","reduce","cur","prev","length","swal","buttons","then","style","display","onClick","randomCards","array","t","i","m","Math","floor","random","shuffle","slice","splice","map","key","backgroundImage","image","backgroundSize","backgroundRepeat","backgroundPosition","height","flex","margin","disabled","toDiscard","copyCards","firstCard","discardCard","width","rules","src","alt","NotFound","App","fonts","font","weights","exact","path","component","LandingPage","Rules","About","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d7d19ba.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../src/css/landingPage.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nexport default function landingPage() {\n  return (\n    <div className='container'>\n      <header className='box'>\n        <h1>Fantasy Realms</h1>\n      </header>\n      <div className='section-wrapper'>\n        <section className='play box'>\n          <Link className='link' to='/play'>\n            Play\n          </Link>\n        </section>\n\n        <section className='rules box'>\n          <Link className='link' to='/rules'>\n            Rules\n          </Link>\n        </section>\n\n        <section className='about box'>\n          <Link className='link' to='/about'>\n            About\n          </Link>\n        </section>\n      </div>\n\n      <footer className='box'>\n        <p> Made by Krzysztof Kozak</p>\n        <a href='https://www.linkedin.com/in/kriskozak/' target='_blank' rel='noopener noreferrer'>\n          <FontAwesomeIcon className='linkedIn' icon={faLinkedin} />\n        </a>\n        <a href='https://github.com/krzysztof-kozak/' target='_blank' rel='noopener noreferrer'>\n          <FontAwesomeIcon className='linkedIn' icon={faGithub} />\n        </a>\n      </footer>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport swal from '@sweetalert/with-react';\nimport '../src/css/play.css';\nimport deck from './data/deck.json';\n\nexport default function Play() {\n  const [cards, setCards] = useState(deck.cards);\n  const [playerHand, setPlayerHand] = useState([]);\n  const [discardPile, setDiscardPile] = useState([]);\n  const [totalScore, setTotalScore] = useState(0);\n  const [isGameStarted, setisGameStarted] = useState(false);\n  const [isGameFinished, setisGameFinished] = useState(false);\n  const [endGameMessageDiplay, setEndGameMessageDiplay] = useState('none');\n\n  function shuffle(array) {\n    //Fisher–Yates shuffle: source: https://bost.ocks.org/mike/shuffle/\n    var m = array.length,\n      t,\n      i;\n\n    // While there remain elements to shuffle…\n    while (m) {\n      // Pick a remaining element…\n      i = Math.floor(Math.random() * m--);\n\n      // And swap it with the current element.\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  const handleStart = () => {\n    const randomCards = shuffle([...cards]);\n\n    setPlayerHand(randomCards.slice(0, 7));\n\n    randomCards.splice(0, 8);\n    setCards(randomCards);\n\n    setisGameStarted(true);\n  };\n\n  const discardCard = (toDiscard) => {\n    const copyCards = cards.slice();\n    const firstCard = copyCards.splice(0, 1);\n    setPlayerHand((prev) => [...prev.map((card) => (card.id !== toDiscard.id ? card : firstCard[0]))]);\n    setCards(copyCards);\n    setDiscardPile((prev) => [...prev, { ...toDiscard }]);\n  };\n\n  const restartGame = () => {\n    setCards(deck.cards);\n    setPlayerHand([]);\n    setDiscardPile([]);\n    setTotalScore(0);\n    setisGameStarted(false);\n    setisGameFinished(false);\n    setEndGameMessageDiplay('none');\n  };\n\n  const calculateCardBonus = (currentCard) => {\n    const synergyCards = currentCard.bonus.id; //które karty dają mi bonus?\n    const bonusValue = currentCard.bonus.value; //Jaka jest wartość bonusu?\n    let totalBonusValue = 0; //Łączna wartość zebranych bonusów\n\n    playerHand.forEach((card) => {\n      // debugger;\n      //nie porównuj z samym sobą & i zobacz czy reszta kart daje mi bonus.\n      if (currentCard.id !== card.id && synergyCards.includes(card.id)) {\n        totalBonusValue += bonusValue;\n      }\n    });\n    return totalBonusValue;\n  };\n\n  useEffect(() => {\n    let sum = [];\n    playerHand.forEach((card) => {\n      sum.push(card.basePoints);\n      sum.push(calculateCardBonus(card));\n      setTotalScore(sum.reduce((cur, prev) => cur + prev));\n    });\n\n    playerHand.length > 0 ? setisGameStarted(true) : setisGameStarted(false);\n  }, [playerHand]);\n\n  useEffect(() => {\n    if (discardPile.length >= 5) {\n      setisGameFinished(true);\n      setEndGameMessageDiplay('block');\n    }\n  }, [discardPile]);\n\n  useEffect(() => {\n    if (isGameFinished === true) {\n      swal('Game Finished', `Your total score was ${totalScore}`, 'success', {\n        buttons: ['Restart', 'OK'],\n      }).then((value) => {\n        if (value === null) {\n          restartGame();\n        }\n      });\n    }\n  }, [isGameFinished]);\n\n  return (\n    <div className='gameContainer box'>\n      <section className='drawPile'>\n        <div className='gamebox-logo'></div>\n\n        <button style={{ display: isGameStarted ? 'none' : 'block' }} className='start-btn box' onClick={handleStart}>\n          Start\n        </button>\n\n        <button className='restartButton box' onClick={restartGame} style={{ display: endGameMessageDiplay }}>\n          Restart\n        </button>\n\n        <span style={{ display: isGameStarted ? 'block' : 'none' }}>\n          Total Score:<span className='score'>{totalScore}</span>\n        </span>\n      </section>\n\n      <section className='discardPile'>\n        {discardPile.map((card) => (\n          <div\n            key={card.id}\n            className='card'\n            style={{\n              backgroundImage: `url(./deck/${card.image})`,\n              backgroundSize: 'contain',\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center center',\n              height: '245px',\n              flex: '1 0 150px',\n              margin: '0 1em 1em 0',\n            }}></div>\n        ))}\n      </section>\n\n      <section className='playerHand'>\n        {playerHand.map((currentCard) => (\n          <div key={currentCard.id} className='card-container'>\n            <div className='wrapper'>\n              <button disabled={isGameFinished} onClick={() => discardCard(currentCard)}>\n                Discard\n              </button>\n              <p>\n                Value:\n                <span className='score'>{currentCard.basePoints + calculateCardBonus(currentCard)}</span>\n              </p>\n            </div>\n            <div\n              style={{\n                backgroundImage: `url(./deck/${currentCard.image})`,\n                backgroundSize: 'contain',\n                backgroundRepeat: 'no-repeat',\n                backgroundPosition: 'center center',\n                height: '300px',\n                width: '200px',\n                flex: '0 0 100%',\n                margin: '30 1em 1em 0',\n              }}\n              className='card'></div>\n          </div>\n        ))}\n      </section>\n\n      <div className='wrapper'>\n        <p className='gameHint' style={{ display: isGameStarted ? 'flex' : 'none' }}>\n          Try to get rid of cards that don't fit your hand :)\n        </p>\n        <p className='movesCounter box' style={{ display: isGameStarted ? 'flex' : 'none' }}>\n          You can discard\n          <span className='score'>{5 - discardPile.length}</span> more time(s).\n        </p>\n      </div>\n\n      <Link className='link box' to='/'>\n        Back to Home\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../src/css/rules.css\";\n\nexport default function rules() {\n  return (\n    <div className=\"rulesContainer\">\n      <section className=\"rulesBox box\">\n        <h1>Rules</h1>\n        <ul>\n          <li>Start the game by drawing new hand.</li>\n          <li>\n            You can discard a card in your hand 5 times via the discard button.\n          </li>\n          <li>Try to replace the lowest value card.</li>\n          <li>After 5 discards, you will see your final score.</li>\n        </ul>\n      </section>\n      <Link className=\"link box\" to=\"/\">\n        Back to Home\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../src/css/about.css\";\n\nexport default function rules() {\n  return (\n    <div className=\"aboutContainer\">\n      <div className=\"wrapper\">\n        <img\n          className=\"avatar box\"\n          src=\"./avatar/avatar.jpg\"\n          alt=\"avatar\"\n        />\n        <p className=\"aboutText box\">\n          Hiya, my name is Kris and this is my game project. I copied an\n          existing physical game called Fantasy Realms. The gameplay mechanics\n          are simplified but I plan on expanding them in the future as my\n          knowledge and skill grow.\n        </p>\n      </div>\n\n      <Link className=\"link box\" to=\"/\">\n        Back to Home\n      </Link>\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function NotFound() {\n    return (\n       <h1>404: Whoops, nothing is here!</h1>\n    )\n}\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport GoogleFontLoader from 'react-google-font-loader';\nimport LandingPage from './landingPage';\nimport Play from './play';\nimport Rules from './rules';\nimport About from './about';\nimport NotFound from './notFound';\n\nconst App = () => (\n  <HashRouter>\n    <GoogleFontLoader\n      fonts={[\n        {\n          font: 'Pacifico',\n          weights: [400],\n        },\n      ]}\n    />\n    <Switch>\n      <Route exact path='/' component={LandingPage} />\n      <Route path='/play' component={Play} />\n      <Route path='/rules' component={Rules} />\n      <Route path='/about' component={About} />\n      <Route component={NotFound} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}